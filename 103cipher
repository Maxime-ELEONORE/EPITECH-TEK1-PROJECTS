#!/usr/bin/env python3
##
## EPITECH PROJECT, 2018
## 103cipher
## File description:
## maxime eleonore pierre bittou
##


import sys
import math


def help():
        print("USAGE\n    ./103cipher message key flag")
        print("\nDESCRIPTION\n    message    a message, made of ASCII characters")
        print("    key        the encryption key, made of ASCII characters")
        print("    flag       0 for the message to be encrypted, 1 to be decrypted")


def mat_size(key):

    size = math.sqrt(len(key))
    verification = size * 100 % 10
    if verification == 0:
        return int(size)
    else:
        return int(size) + 1


def create_square_mat(size):

    matrix_of_the_key = [0] * size
    for i in range(size):
        matrix_of_the_key[i] = [0] * size
    return matrix_of_the_key


def encryption(size, message, key, mess):
    taille = int(len(message) / size)
    if taille * 100 % 10 != 0:
        taille += 1
    ecrypted_message = [0] * (taille + 1)
    for i in range(taille + 1):
        ecrypted_message[i] = [0] * size
    for i in range(taille + 1):
        for j in range(size):
            for k in range(size):
                ecrypted_message[i][j] += key[k][j] * mess[i][k]
    return ecrypted_message, taille


def message_mat(message, size):
    taille = len(message) / size
    if taille * 10 != 0:
        taille = int(taille) + 1
    else:
        taille = int(taille)
    matrix_of_the_message = [0] * taille
    for i in range(taille):
        matrix_of_the_message[i] = [0] * size
    a = 0
    b = 0
    c = 0
    l = len(message)
    while b < taille and c < l:
        while a < size and l > c:
            matrix_of_the_message[b][a] = ord(message[c])
            c += 1
            a += 1
        b += 1
        a = 0
    while b < taille:
        while a < size:
            matrix_of_the_message[b][a] = 0
            a += 1
        b += 1
        a = 0
    return matrix_of_the_message


def key_mat(matrix_of_the_key, size, key):

    a = 0
    b = 0
    c = 0
    l = len(key)
    while b < size and c < l:
        while a < size and l > c:
            matrix_of_the_key[b][a] = ord(key[c])
            c += 1
            a += 1
        b += 1
        a = 0
    while b < size:
        while a < size:
            matrix_of_the_key[b][a] = 0
            c += 1
            a += 1
        b += 1
        a = 0
    return matrix_of_the_key

def get_encrypted_message(size, message):
    taille = len(message) / size
    if taille * 10 != 0:
        taille = int(taille) + 1
    else:
        taille = int(taille)
    matrix_of_the_message = [0] * taille
    for i in range(taille):
        matrix_of_the_message[i] = [0] * size
    index = 0
    a = 0
    for a in range(taille):
        for b in range(size):
            while message[index] != " ":
                a = a * 10 + message[index]
                index += 1


def decrypte1_1(key, mess, size):
    key_invesed = 1 / key[0][0]
    for i in range(taille):
        for j in range(size):
            mess[i][j] *= key_invesed
    return mess


def main():
    if sys.argv[1] == "-h":
        help()
    else:
        message = sys.argv[1]
        key = sys.argv[2]
        size = mat_size(key)
        if sys.argv[3] == "0":
            matrix_of_the_key = create_square_mat(size)
            matrix_of_the_key = key_mat(matrix_of_the_key, size, key)
            matrix_of_the_message = message_mat(message, size)
            encrypted_message, taille = encryption(size, message, matrix_of_the_key, matrix_of_the_message)
            print("Key matrix:")
            for i in range(size):
                for j in range(size):
                    if j < size - 1:
                        print(matrix_of_the_key[i][j], end = "\t")
                    else:
                        print(matrix_of_the_key[i][j])
            print()
            print("Encrypted message:")
            for i in range(taille + 1):
                for j in range(size):
                    if encrypted_message[i][j] != 0:
                        if size == 1:
                            if i == taille  and j == size - 1 or encrypted_message[i + 1][j] == 0:
                                print(encrypted_message[i][j], end = "\n")
                            else:
                                print(encrypted_message[i][j], end = " ")
                        else:
                            if i == taille  and j == size - 1:
                                print(encrypted_message[i][j], end = "\n")
                            else:
                                print(encrypted_message[i][j], end = " ")
        if sys.argv[3] == "1":
                size = mat_size(key)
                matrix_of_the_key = create_square_mat(size)
                matrix_of_the_key = key_mat(matrix_of_the_key, size, key)
                if size == 1:
                    print("matrice 1x1")
                    matrix_of_the_key_invesed = 1 / matrix_of_the_key[0][0]
                    print(matrix_of_the_key)
                    print(matrix_of_the_key_invesed)
                    ##matrix_of_the_message_encrypted =




                elif size == 2:
                    b = verification_of_the_invertibility(matrix_of_the_key)
                    if b == 0:
                        print("matrice non inversible")
                        print(b)
                        exit(84)
                    else:
                        print("matrice inversible")
                        print(b)
                        matrix_of_the_key_inversed = create_square_mat(2)
                        matrix_of_the_key_inversed[0][0] = (1 / b) * matrix_of_the_key[1][1]
                        matrix_of_the_key_inversed[0][1] = (1 / b) * (-1 * matrix_of_the_key[0][1])
                        matrix_of_the_key_inversed[1][0] = (1 / b) * (-1 * matrix_of_the_key[1][0])
                        matrix_of_the_key_inversed[1][1] = (1 / b) * matrix_of_the_key[0][0]
                        print(matrix_of_the_key_inversed)





                elif size == 3:
                    print("matrice 3x3")
        else:
            exit(84)
try:
    main()
except:
    exit(84)
